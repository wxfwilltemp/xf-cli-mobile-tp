{
  "compilerOptions": {
    "outDir": "./dist", // 输出目录
    "module": "esnext", // 指定生成哪个模块系统代码
    "target": "esnext", // 编译的目标是什么版本的
    "lib": ["esnext", "dom"], // 编译过程中需要引入的库文件的列表
    "sourceMap": true, // 是否生成map文件
    "baseUrl": ".", // 工作根目录
    "jsx": "react-jsx", // 在 .tsx文件里支持JSX
    "allowSyntheticDefaultImports": true, // 用来指定允许从没有默认导出的模块中默认导入
    "moduleResolution": "node", // 用于选择模块解析策略，有'node'和'classic'两种类型'
    "forceConsistentCasingInFileNames": true, // 禁止对同一个文件的不一致的引用
    "noImplicitReturns": true, // 用于检查函数是否有返回值，设为true后，如果函数没有返回值则会提示，默认为false
    "suppressImplicitAnyIndexErrors": true, // 在ts遍历对象中允许索引
    "noUnusedLocals": true, // 用于检查是否有定义了但是没有使用的变量，对于这一点的检测，使用eslint可以在你书写代码的时候做提示，你可以配合使用。它的默认值为false
    "allowJs": true, // 允许编译javascript文件。
    "skipLibCheck": true, // 忽略所有的声明文件（ *.d.ts）的类型检查
    "experimentalDecorators": true, // 启用实验性的ES装饰器
    "strict": true, // strict的值为true或false，用于指定是否启动所有类型检查，如果设为true则会同时开启下面这几个严格类型检查，默认为false
    // "importsNotUsedAsValues": "preserve",
    "paths": {
      // 指定模块的路径，和baseUrl有关联，和webpack中resolve.alias配置一样
      "@/*": ["./src/*"],
      "utils/*": ["./src/utils/*"]
    }
  },
  "include": [
    // 指定一个匹配列表（属于自动指定该路径下的所有ts相关文件）
    "src/**/*",
    "types/**/*",
    "config/**/*",
    ".eslintrc.js",
    ".stylelintrc.js",
    ".postcssrc.js",
    ".prettierrc.js",
    "./webpack.config.js"
  ],
  // 指定一个排除列表（include的反向操作）
  "exclude": ["node_modules", "build", "dist"]
}
